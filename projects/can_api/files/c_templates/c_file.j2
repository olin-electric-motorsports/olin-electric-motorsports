#include "{{ header_file }}"
#include <util/atomic.h>

void can_init_{{ node.name }}(void) {
    can_init(BAUD_500KBPS);
}

/*
 * Transmit messages
 */
{% for message in tx_messages %}
uint8_t {{ message.name|lower }}_data[{{ message.length }}] = {0};

can_frame_t {{ message.name|lower }}_msg = {
    .id = {{ message.frame_id }},
    .mob = 0,
    .data = {{ message.name|lower }}_data,
    .dlc = {{ message.length }},
};

volatile struct can_tools_{{ message.name|lower }}_t {{ message.name|lower }} = {0};

void can_send_{{ message.name|lower }}(void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
        // We can be sure here that the CAN data struct won't change here

        can_tools_{{ message.name|lower }}_pack(
            {{ message.name|lower }}_data,
            // We can safely discard the volatile qualifier because we are in an
            // ATOMIC block, so the value will not be changed in an ISR
            (const struct can_tools_{{ message.name|lower }}_t*) &{{ message.name|lower }},
            {{ message.length }}
        );
    }

    can_send(&{{ message.name|lower }}_msg);
}

{% endfor %}

/*
 * Receive messages
 */
{% for message in rx_messages %}
uint8_t {{ message.name|lower }}_data[{{ message.length }}] = {0};

can_frame_t {{ message.name|lower }}_msg = {
    .mob = {{ mobs[message.name] }},
    .data = {{ message.name|lower }}_data,
};

can_filter_t {{ message.name|lower }}_filter = {
    .id = {{ message.frame_id }},

    /*
     * TODO: It would be nice if this was configurable...
     */
    .mask = 0x7FF, // Exact match
};

struct can_tools_{{ message.name|lower }}_t {{ message.name|lower }} = {0};

int can_receive_{{ message.name|lower }}(void) {
    (void)can_receive(&{{ message.name|lower }}_msg, {{ message.name|lower }}_filter);

    return 0;
}

int can_poll_receive_{{ message.name|lower }}(void) {
    int rc = can_poll_receive(&{{ message.name|lower }}_msg);

    if (rc == 0) {
        can_tools_{{ message.name|lower }}_unpack(&{{ message.name|lower }}, {{ message.name|lower }}_msg.data, {{ message.length }});
    }

    return rc;
}

{% endfor %}
